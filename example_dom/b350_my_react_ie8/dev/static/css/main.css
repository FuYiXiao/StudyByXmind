@charset "UTF-8";
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font: inherit;
  font-size: 100%;
  vertical-align: baseline;
}

html {
  line-height: 1;
}

ol, ul {
  list-style: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

caption, th, td {
  text-align: left;
  font-weight: normal;
  vertical-align: middle;
}

q, blockquote {
  quotes: none;
}

q:before, q:after, blockquote:before, blockquote:after {
  content: "";
  content: none;
}

a img {
  border: none;
}

elements-of-type(html5-block) {
  display: block;
}

/*页面的基本参数和函数*/
/*页面的整体框架*/
.clearfix:before, .clearfix:after {
  content: " ";
  display: table;
}

.clearfix:after {
  clear: both;
}

html {
  min-width: 1260px;
}

body {
  background-color: #438eb9;
  font-family: "Microsoft YaHei";
  font-size: 14px;
  line-height: 1.5;
  color: #666666;
  line-height: 1.5;
  font-size: cos(12);
}

a {
  color: #ff8700;
}

a:visited {
  color: #ff9f33;
}

a:focus {
  color: #995100;
}

a:hover {
  color: #995100;
}

a:active {
  color: #ffb766;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/